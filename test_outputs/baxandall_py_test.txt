# This scattering matrix was derived using the R-Solver python script (https://github.com/jatinchowdhury18/R-Solver),
# invoked with command: r_solver.py --datum 0 --adapt 5 ./netlists/baxandall.txt --verbose --pywdf --out ./test_outputs/baxandall_py_test.txt
R.set_S_matrix([[-((Ra*Ra*Rb + Ra*Ra*Rc - Rb*Rc*Rc)*Rd*Rd - (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + 2*Ra*Ra*Rb*Rc + (Ra*Ra - Rb*Rb)*Rc*Rc)*Rd + (Ra*Ra*Rb*Rb + 2*Ra*Ra*Rb*Rc + (Ra*Ra - Rb*Rb)*Rc*Rc + (Ra*Ra - 2*Rb*Rc)*Rd*Rd + 2*(Ra*Ra*Rb - Rb*Rc*Rc + (Ra*Ra - Rb*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                          -((Ra*Ra*Rc + Ra*Rc*Rc)*Rd*Rd + (Ra*Rb*Rc + Ra*Rc*Rc + Ra*Rd*Rd + (Ra*Rb + 2*Ra*Rc)*Rd)*Re*Re + 2*(Ra*Ra*Rb*Rc + (Ra*Ra + Ra*Rb)*Rc*Rc)*Rd + (2*Ra*Ra*Rb*Rc + 2*(Ra*Ra + Ra*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rc)*Rd*Rd + (Ra*Ra*Rb + 2*Ra*Rc*Rc + 3*(Ra*Ra + Ra*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                             ((2*Ra*Ra*Rb + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + Ra*Rb*Rc + Ra*Rb*Rd)*Re*Re + 2*(Ra*Ra*Rb*Rb + (Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (2*Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + (3*Ra*Ra*Rb + 2*Ra*Rb*Rb + (Ra*Ra + 3*Ra*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                                                                                                     -((Ra*Rb*Rb + Ra*Rb*Rc + Ra*Rb*Rd)*Re*Re - (Ra*Ra*Rb*Rc + (Ra*Ra + Ra*Rb)*Rc*Rc)*Rd + (Ra*Ra*Rb*Rb + Ra*Rb*Rb*Rc - (Ra*Ra + Ra*Rb)*Rc*Rc + (Ra*Ra*Rb - Ra*Ra*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                    ((2*Ra*Ra*Rb + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (2*Ra*Ra*Rb*Rb + (Ra*Ra + Ra*Rb)*Rc*Rc + (3*Ra*Ra*Rb + 2*Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + Ra*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rd*Rd + (2*Ra*Ra*Rb + Ra*Rb*Rb)*Rc + (2*Ra*Ra*Rb + 2*Ra*Rb*Rb + (2*Ra*Ra + 3*Ra*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Rea*Rc*Rd + (Ra*Rb + Ra*Rc + Ra*Rd)*Re)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re),],
	[                         -((Ra*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + 2*(Ra*Rb*Rb*Rc + (Ra*Rb + Rb*Rb)*Rc*Rc)*Rd + (2*Ra*Rb*Rb*Rc + 2*(Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Rb + 2*Rb*Rc)*Rd*Rd + (Ra*Rb*Rb + 2*Rb*Rc*Rc + 3*(Ra*Rb + Rb*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),  ((Ra*Ra*Rc + Ra*Rc*Rc)*Rd*Rd - (Ra*Rb*Rb + Rb*Rb*Rc - Ra*Rc*Rc - Ra*Rd*Rd + (Rb*Rb - 2*Ra*Rc)*Rd)*Re*Re - (Ra*Ra*Rb*Rb + 2*Ra*Rb*Rb*Rc - (Ra*Ra - Rb*Rb)*Rc*Rc)*Rd - (Ra*Ra*Rb*Rb + 2*Ra*Rb*Rb*Rc - (Ra*Ra - Rb*Rb)*Rc*Rc - (Ra*Ra + 2*Ra*Rc)*Rd*Rd + 2*(Ra*Rb*Rb - Ra*Rc*Rc - (Ra*Ra - Rb*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                            -((Ra*Ra*Rb + Ra*Rb*Rc)*Rd*Rd + (2*Ra*Rb*Rb + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb)*Rd)*Re*Re + 2*(Ra*Ra*Rb*Rb + (Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (2*Ra*Ra*Rb*Rb + Ra*Rb*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + (2*Ra*Ra*Rb + 3*Ra*Rb*Rb + (3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                      ((2*Ra*Rb*Rb + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra*Rb + 2*Ra*Rb*Rb)*Rc)*Rd + (2*Ra*Ra*Rb*Rb + (Ra*Rb + Rb*Rb)*Rc*Rc + (2*Ra*Ra*Rb + 3*Ra*Rb*Rb)*Rc + (2*Ra*Ra*Rb + 2*Ra*Rb*Rb + (3*Ra*Rb + 2*Rb*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                                                                                                   -((Ra*Ra*Rb + Ra*Rb*Rc)*Rd*Rd + (Ra*Ra*Rb*Rb + Ra*Ra*Rb*Rc - (Ra*Rb + Rb*Rb)*Rc*Rc)*Rd - (Ra*Rb*Rb*Rc - Ra*Rb*Rd*Rd + (Ra*Rb + Rb*Rb)*Rc*Rc - (Ra*Rb*Rb - Rb*Rb*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                -((Ra*Rb + Rb*Rc)*Rd + (Rb*Rc + Rb*Rd)*Re)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re),],
	[                                        ((2*Ra*Rb*Rc + (Ra + 2*Rb)*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rc*Rd)*Re*Re + 2*(Ra*Rb*Rb*Rc + (Ra*Rb + Rb*Rb)*Rc*Rc)*Rd + (2*Ra*Rb*Rb*Rc + (Ra + 2*Rb)*Rc*Rd*Rd + 2*(Ra*Rb + Rb*Rb)*Rc*Rc + ((Ra + 3*Rb)*Rc*Rc + (3*Ra*Rb + 2*Rb*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                        -((Ra*Ra*Rc + Ra*Rc*Rc)*Rd*Rd + (2*Ra*Rb*Rc + (2*Ra + Rb)*Rc*Rc + (2*Ra + Rb)*Rc*Rd)*Re*Re + 2*(Ra*Ra*Rb*Rc + (Ra*Ra + Ra*Rb)*Rc*Rc)*Rd + (2*Ra*Ra*Rb*Rc + Ra*Rc*Rd*Rd + 2*(Ra*Ra + Ra*Rb)*Rc*Rc + ((3*Ra + Rb)*Rc*Rc + (2*Ra*Ra + 3*Ra*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),   ((Ra*Ra*Rb - (Ra + Rb)*Rc*Rc)*Rd*Rd + (Ra*Rb*Rb - (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rd)*Re*Re + (Ra*Ra*Rb*Rb - (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc)*Rd + (Ra*Ra*Rb*Rb - (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb - (Ra + Rb)*Rc*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                                     ((2*(Ra + Rb)*Rc*Rc + 2*(Ra + Rb)*Rc*Rd + (2*Ra*Rb + Rb*Rb)*Rc)*Re*Re + (Ra*Ra*Rb*Rc + (Ra*Ra + Ra*Rb)*Rc*Rc)*Rd + ((2*Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc*Rc + (2*Ra*Ra*Rb + Ra*Rb*Rb)*Rc + (2*(Ra + Rb)*Rc*Rc + (2*Ra*Ra + 3*Ra*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                                  -((2*(Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + ((Ra*Ra + 3*Ra*Rb + 2*Rb*Rb)*Rc*Rc + (Ra*Ra*Rb + 2*Ra*Rb*Rb)*Rc)*Rd + (Ra*Rb*Rb*Rc + 2*(Ra + Rb)*Rc*Rd*Rd + (Ra*Rb + Rb*Rb)*Rc*Rc + (2*(Ra + Rb)*Rc*Rc + (3*Ra*Rb + 2*Rb*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Rea*Rc*Rd - Rb*Rc*Re)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re),],
	[                                                                                                                                   ((Ra*Rb*Rc + (Ra + Rb)*Rc*Rc)*Rd*Rd - (Rb*Rd*Rd + (Rb*Rb + Rb*Rc)*Rd)*Re*Re - ((Ra*Rb - Ra*Rc)*Rd*Rd + (Ra*Rb*Rb + Rb*Rb*Rc - (Ra + Rb)*Rc*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                                    ((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + ((2*Ra + Rb)*Rd*Rd + (2*Ra*Rb + (2*Ra + Rb)*Rc)*Rd)*Re*Re + ((2*Ra*Ra + 2*Ra*Rb + (3*Ra + 2*Rb)*Rc)*Rd*Rd + (2*Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (2*Ra*Ra + 3*Ra*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                                                  ((Ra*Ra*Rb + (Ra*Ra + Ra*Rb)*Rc)*Rd*Rd + (2*(Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + ((2*Ra*Ra + 3*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + (2*Ra*Ra*Rb + Ra*Rb*Rb + (2*Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                            -((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd - (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc - (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc)*Re*Re - (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc - (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                               -((Ra*Ra*Rb + 2*(Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb)*Rc)*Rd*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + ((Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + 2*(Ra + Rb)*Rc*Rc + (3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Reb*Rd*Re + (Ra*Rb + (Ra + Rb)*Rc)*Rd)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re),],
	[                                                          ((Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + 2*Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + 2*Rb*Rb + (2*Ra + 3*Rb)*Rc)*Rd)*Re*Re + ((2*Ra*Rb + (Ra + 2*Rb)*Rc)*Rd*Rd + (2*Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (3*Ra*Rb + 2*Rb*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                                                                                                                           ((Ra*Rb*Rc + (Ra + Rb)*Rc*Rc - Ra*Rd*Rd - (Ra*Rb - Rb*Rc)*Rd)*Re*Re - ((Ra*Ra + Ra*Rc)*Rd*Rd + (Ra*Ra*Rb + Ra*Ra*Rc - (Ra + Rb)*Rc*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                                                        -((Ra*Rb*Rb + 2*(Ra + Rb)*Rd*Rd + (Ra*Rb + Rb*Rb)*Rc + (3*Ra*Rb + 2*Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + ((Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + (Ra*Ra*Rb + 2*Ra*Rb*Rb + (Ra*Ra + 3*Ra*Rb + 2*Rb*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                                      -((Ra*Rb*Rb + 2*(Ra + Rb)*Rc*Rc + (3*Ra*Rb + Rb*Rb)*Rc + (Ra*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + (Ra*Ra*Rb + 2*(Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                               ((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd - (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Rea*Rb + (Ra + Rb)*Rc + Ra*Rd)*Re/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re),],
	[                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          -(Rc*Rd + (Rb + Rc + Rd)*Re)/(Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Rea + Rc)*Rd + (Rc + Rd)*Re)/(Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Rea*Rd - Rb*Re)/(Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Rea*Rb + (Ra + Rb)*Rc + Rb*Re)/(Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Rea*Rb + (Ra + Rb)*Rc + Ra*Rd)/(Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re
)

Rf = ((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re)/(Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)
return Rf